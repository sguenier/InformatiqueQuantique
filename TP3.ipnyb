import numpy as np
from qiskit import QuantumCircuit, Aer, transpile, execute
from qiskit.visualization import plot_state_city, plot_histogram

circuit = QuantumCircuit(2)

circuit.h(0)
circuit.h(1)

circuit.draw('mpl')

circuit.x(0)

circuit.cz(0, 1)

circuit.x(0)
circuit.barrier()
circuit.draw('mpl')

circuit.h(0)
circuit.h(1)

circuit.z(0)
circuit.z(1)

circuit.cz(0, 1)

circuit.h(0)
circuit.h(1)
circuit.draw('mpl')

circuit.measure_all()
circuit.draw('mpl')

statevector_backend = Aer.get_backend('statevector_simulator')
statevector_job = statevector_backend.run(circuit)
statevector_result = statevector_job.result()
output_statevector = statevector_result.get_statevector(circuit, decimals=3)
print(output_statevector)

plot_state_city(output_statevector)

simulator_backend = Aer.get_backend('aer_simulator')
shots = 1024
probabilistic_job = execute(transpile(circuit, simulator_backend), backend=simulator_backend, shots=shots)
probabilistic_result = probabilistic_job.result()
counts = probabilistic_result.get_counts(circuit)

plot_histogram(counts)
